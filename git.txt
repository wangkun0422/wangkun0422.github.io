CVS
SVN
VSS

集中式：
1、必须要依赖于一台中央服务器（搭建服务器）
2、必须要联网
3、所有的操作都由服务器完成

Git：
分布式
1、随意位置都可以作为代码仓库（不需要搭建服务器）
2、所有操作都是本机完成（随意拷贝，本地操作完成后再上传至远程仓库）

Git相比其它版本工具更加安全和高效！

-------------------------------------------------------------------------------------------------------

原理/特点：
***三阶段管理***

阶段        颜色        状态                        操作
工作区      红色        Untracked（未追踪）          加入暂存（交由Git工具进行预处理——索引、分析统计、镜像）
暂存区      绿色        Staged（被索引/记录）        取消暂存（回到工作区状态），进行提交（最终被Git管理）
仓库区                  Commited（已提交）          实现版本比较，分支，上传，回退

只有暂存区内容才会在提交时被写入仓库（文件不能跳过暂存区直接写入仓库）

-------------------------------------------------------------------------------------------------------

如何通过Git管理项目代码？
1、将当前项目所在目录初始化为一个本地仓库
git init

这时会在当前工程的根目录下创建一个.git文件夹（这就是本地仓库目录——隐藏的）
通过dir /ah查看

2、在当前项目/仓库中，配置身份（如果没有配置，在提交代码时会提醒）
git config user.name "zhangsan"
git config user.email "itany@163.com"
查看
git config user.name
git config user.email

上面操作一定要在一个本地仓库中执行！！！

3、设置全局的身份（如果在一个仓库中，如果没有配置过身份，那么就使用全局身份）
git config --global user.name "zhangsan"
git config --global user.email "zhangsan@163.com"
查看
git config --global user.name
git config --global user.email

全局身份的配置和查看无所谓项目/仓库位置！

4、查看当前工作区中所有内容（文件和目录）的状态
git status

5、将文件或者目录加入暂存区（被Git识别索引）
git add Readme.txt gulpfile.js package.json
git add src/

技巧：将工作区中所有希望被暂存的内容一并加入暂存区！
git add .
git add -A
git add --all

6、配置忽略清单（将项目中永远不需要被Git状态识别的内容全部定义为一个列表）
在项目/仓库的根目录下，定义.gitignore

7、写入/提交到本地仓库库
git commit -m "init project"

8、文件重命名
再次add .，再次commit即可

9、删除文件
I、从本地手动删除，再add .，再commit即可
或者
II、直接通过git rm xxx.js，再commit即可

10、移除被暂存的文件（还要继续编辑）
git rm --cached xxx.js

11、移除被暂存的目录（该目录下的内容还要继续编辑）
git rm --cached -r doc/

----------------------------------------------------------------------------------------------

查看git中的指定命令的详细语法帮助
git commit --help
git help commit















